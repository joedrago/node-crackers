browserify = require 'browserify'
coffeeify = require 'coffeeify'
uglifyify = require 'uglifyify'

Markdown = require 'remarkable'

fs = require 'fs'
path = require 'path'
{spawn} = require 'child_process'
util = require 'util'

coffeeName = 'coffee'
if process.platform == 'win32'
  coffeeName += '.cmd'

buildUI = (callback) ->
  # equal of command line $ "browserify --debug -t coffeeify ./src/main.coffee > bundle.js "
  productionBuild = (process.env.NODE_ENV == 'production')
  opts = {
    extensions: ['.coffee']
  }
  if not productionBuild
    opts.debug = true
  b = browserify opts
  b.add './src/ui/main.coffee'
  b.transform coffeeify
  if productionBuild
    b.transform { global: true, ignore: ['**/main.*'] }, uglifyify
  b.bundle (err, result) ->
    if not err
      fs.writeFile "build/templates/ui.js", result, (err) ->
        if not err
          util.log "UI compilation finished."
          callback?()
        else
          util.log "UI bundle write failed: " + err
    else
      util.log "UI compilation failed: " + err

buildMarkdown = (callback) ->
  parser = new Markdown {
    # options
  }
  files = fs.readdirSync('./markdown')

  header = """
    # This file is autogenerated. See Cakefile.

    React = require 'react'
    {span} = require './tags'

    markdowns =
  """

  footer = """
    class MarkdownSpan extends React.Component
      constructor: (props) ->
        super props

      render: ->
        html = markdowns[@props.name] ? ""
        return span {
          dangerouslySetInnerHTML:
            __html: html
        }

    module.exports = MarkdownSpan
  """

  markdownSpan = header + "\n"

  for filename in files
    parsed = path.parse(filename)
    markdown = fs.readFileSync("./markdown/#{filename}")
    html = parser.render(String(markdown))
    markdownSpan += "  #{parsed.name}: " + JSON.stringify(html) + "\n"
  markdownSpan += "\n" + footer
  fs.writeFileSync("./src/ui/MarkdownSpan.coffee", markdownSpan)
  util.log "MarkdownSpan generation finished."
  callback?()

buildTool = (callback) ->
  coffee = spawn coffeeName, ['-c', '-o', 'build', 'src/tool']
  coffee.stderr.on 'data', (data) ->
    process.stderr.write data.toString()
    process.exit(-1)
  coffee.stdout.on 'data', (data) ->
    print data.toString()
  coffee.on 'exit', (code) ->
    util.log "Tool compilation finished."
    callback?() if code is 0

task 'build', 'build JS bundle', (options) ->
  buildTool ->
    buildMarkdown ->
      buildUI ->
