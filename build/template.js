// Generated by CoffeeScript 1.9.3
(function() {
  var cfs, constants, defaultReplacement, defaultReplacements, fs, interpTemplate, k, loadTemplateDir, path, templates, v;

  fs = require('fs');

  cfs = require('./cfs');

  path = require('path');

  constants = require('./constants');

  defaultReplacements = {};

  for (k in constants) {
    v = constants[k];
    k = k.replace(/_/, "").toLowerCase();
    defaultReplacements[k] = String(v);
  }

  templates = {};

  loadTemplateDir = function(templateDir) {
    var filename, i, len, name, parsed, rawTemplate, results, templateFile, templateFiles, templateLines;
    templateFiles = cfs.listDir(templateDir);
    results = [];
    for (i = 0, len = templateFiles.length; i < len; i++) {
      templateFile = templateFiles[i];
      filename = cfs.join(templateDir, templateFile);
      if (!fs.existsSync(filename)) {
        continue;
      }
      rawTemplate = fs.readFileSync(filename);
      templateLines = String(rawTemplate).split(/(?:\n|\r\n|\r)/g);
      parsed = path.parse(filename);
      name = parsed.base.replace(".", "_");
      results.push(templates[name] = templateLines);
    }
    return results;
  };

  loadTemplateDir(__dirname + "/../templates");

  loadTemplateDir(__dirname + "/../build/templates");

  defaultReplacement = function(key) {
    var ref;
    return (ref = defaultReplacements[key]) != null ? ref : "";
  };

  interpTemplate = function(name, replacements) {
    var i, len, line, outputText, ref, templateLines;
    if (!templates[name]) {
      return "";
    }
    templateLines = templates[name];
    outputText = "";
    ref = templateLines.slice(0);
    for (i = 0, len = ref.length; i < len; i++) {
      line = ref[i];
      line = line.replace(/#inject\{([^\}]+)\}/g, function(match, key) {
        var ref1;
        return (ref1 = replacements[key]) != null ? ref1 : defaultReplacement(key);
      });
      line = line.replace(/#include\{([^\}]+)\}/g, function(match, key) {
        return interpTemplate(key, replacements);
      });
      outputText += line;
      outputText += "\n";
    }
    return outputText;
  };

  module.exports = interpTemplate;

}).call(this);
