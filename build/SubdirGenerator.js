// Generated by CoffeeScript 1.9.3
(function() {
  var CoverGenerator, SubdirGenerator, cfs, constants, log, path;

  cfs = require('./cfs');

  constants = require('./constants');

  log = require('./log');

  path = require('path');

  CoverGenerator = require('./CoverGenerator');

  SubdirGenerator = (function() {
    function SubdirGenerator(rootDir, dir, force, download) {
      var pieces;
      this.rootDir = rootDir;
      this.dir = dir;
      this.force = force;
      this.download = download;
      this.rootDir = this.rootDir.replace(path.sep + "$", "");
      pieces = this.dir.substr(this.rootDir.length + 1).split(path.sep);
      this.title = pieces.join(" | ");
    }

    SubdirGenerator.prototype.generate = function() {
      var coverGenerator, i, images, len, md, mdList, metadata, recent, timestamp, totalCount;
      mdList = cfs.gatherMetadata(this.dir);
      if (mdList.length === 0) {
        log.error("Nothing in '" + this.dir + "', removing metadata");
        cfs.removeMetadata(this.dir);
        return false;
      }
      images = (function() {
        var i, len, results;
        results = [];
        for (i = 0, len = mdList.length; i < len; i++) {
          md = mdList[i];
          results.push(path.join(this.dir, md.path, constants.COVER_FILENAME));
        }
        return results;
      }).call(this);
      coverGenerator = new CoverGenerator(this.rootDir, this.dir, images, this.force);
      coverGenerator.generate();
      totalCount = 0;
      timestamp = 0;
      recent = "";
      for (i = 0, len = mdList.length; i < len; i++) {
        metadata = mdList[i];
        if (timestamp < metadata.timestamp) {
          timestamp = metadata.timestamp;
          recent = metadata.path;
        }
        totalCount += metadata.count;
      }
      cfs.writeMetadata(this.dir, {
        type: 'index',
        title: this.title,
        count: totalCount,
        timestamp: timestamp,
        recent: recent
      });
      return log.progress("Updated subdir: " + this.title);
    };

    return SubdirGenerator;

  })();

  module.exports = SubdirGenerator;

}).call(this);
