// Generated by CoffeeScript 1.9.3
(function() {
  var ComicGenerator, Crackers, IndexGenerator, MobileGenerator, Unpacker, cfs, constants, fs, log, path, ref, touch;

  cfs = require('./cfs');

  constants = require('./constants');

  fs = require('fs');

  log = require('./log');

  path = require('path');

  touch = require('touch');

  ref = require('./generators'), ComicGenerator = ref.ComicGenerator, IndexGenerator = ref.IndexGenerator, MobileGenerator = ref.MobileGenerator;

  Unpacker = require('./unpacker');

  Crackers = (function() {
    function Crackers() {}

    Crackers.prototype.error = function(text) {
      log.error(text);
      return false;
    };

    Crackers.prototype.update = function(args) {
      var comicDir, comicGenerator, file, filesToUnpack, i, imageDir, imageDirPieces, imageDirs, indexDir, indexDirSeen, indexDirs, indexGenerator, j, k, l, len, len1, len2, len3, m, mobileGenerator, nextDir, nextParent, nextParsed, parent, parsed, unpackDir, unpackFile;
      this.force = args.force;
      this.download = args.download;
      this.updateDir = path.resolve('.', args.dir);
      if (!cfs.dirExists(this.updateDir)) {
        return this.error("'" + this.updateDir + "' is not an existing directory.");
      }
      log.verbose("updateDir: " + this.updateDir);
      this.rootDir = cfs.findParentContainingFilename(this.updateDir, constants.ROOT_FILENAME);
      if (!this.rootDir) {
        this.rootDir = this.updateDir;
        log.warning("crackers root not found (" + constants.ROOT_FILENAME + " not detected in parents).");
      }
      log.verbose("rootDir  : " + this.rootDir);
      cfs.touchRoot(this.rootDir);
      filesToUnpack = (function() {
        var j, len, ref1, results;
        ref1 = cfs.listDir(this.updateDir);
        results = [];
        for (j = 0, len = ref1.length; j < len; j++) {
          file = ref1[j];
          if (file.match(/\.cb[rz]$/)) {
            results.push(path.resolve(this.updateDir, file));
          }
        }
        return results;
      }).call(this);
      for (j = 0, len = filesToUnpack.length; j < len; j++) {
        unpackFile = filesToUnpack[j];
        parsed = path.parse(unpackFile);
        unpackDir = cfs.join(parsed.dir, parsed.name);
        log.verbose("Processing " + unpackFile + " ...");
        this.unpack(unpackFile, unpackDir, this.force);
      }
      imageDirs = (function() {
        var k, len1, ref1, results;
        ref1 = cfs.listDir(this.updateDir);
        results = [];
        for (k = 0, len1 = ref1.length; k < len1; k++) {
          file = ref1[k];
          if (file.match(/images$/)) {
            results.push(path.resolve(this.updateDir, file));
          }
        }
        return results;
      }).call(this);
      for (i = k = 0, len1 = imageDirs.length; k < len1; i = ++k) {
        imageDir = imageDirs[i];
        parsed = path.parse(imageDir);
        if (parsed.dir) {
          comicDir = parsed.dir;
          parent = path.parse(parsed.dir);
          nextDir = "";
          if (i + 1 < imageDirs.length) {
            nextParsed = path.parse(imageDirs[i + 1]);
            if (nextParsed.dir) {
              nextParent = path.parse(nextParsed.dir);
              if (nextParent.name && (parent.dir === nextParent.dir)) {
                nextDir = "../" + nextParent.name;
              }
            }
          }
          comicGenerator = new ComicGenerator(this.rootDir, comicDir, nextDir, this.force);
          comicGenerator.generate();
        }
      }
      indexDirSeen = {};
      for (l = 0, len2 = imageDirs.length; l < len2; l++) {
        imageDir = imageDirs[l];
        imageDirPieces = imageDir.split(path.sep);
        imageDirPieces.pop();
        imageDirPieces.pop();
        while (imageDirPieces.length > 1) {
          indexDir = cfs.join.apply(null, imageDirPieces);
          indexDirSeen[indexDir] = true;
          if (indexDir === this.rootDir) {
            break;
          }
          imageDirPieces.pop();
        }
      }
      indexDirs = Object.keys(indexDirSeen).sort().reverse();
      for (m = 0, len3 = indexDirs.length; m < len3; m++) {
        indexDir = indexDirs[m];
        indexGenerator = new IndexGenerator(this.rootDir, indexDir, this.force, this.download);
        indexGenerator.generate();
      }
      mobileGenerator = new MobileGenerator(this.rootDir);
      mobileGenerator.generate();
      return true;
    };

    Crackers.prototype.unpack = function(file, dir, force) {
      var indexFilename, unpackRequired, unpacker, valid;
      if (!cfs.prepareComicDir(dir)) {
        return false;
      }
      indexFilename = cfs.join(dir, constants.INDEX_FILENAME);
      unpackRequired = force.unpack;
      if (cfs.newer(file, indexFilename)) {
        unpackRequired = true;
      }
      if (unpackRequired) {
        log.progress("Unpacking " + file + " into " + dir);
        unpacker = new Unpacker(file, dir);
        valid = unpacker.unpack();
        unpacker.cleanup();
        if (!valid) {
          return false;
        }
      } else {
        log.verbose("Unpack not required: (" + file + " older than " + indexFilename + ")");
      }
      return true;
    };

    Crackers.prototype.findArchives = function(filenames) {
      var archives, cbrRegex, filename, fn, j, k, len, len1, list, stat;
      archives = [];
      cbrRegex = /\.cb[rz]$/i;
      for (j = 0, len = filenames.length; j < len; j++) {
        filename = filenames[j];
        if (!fs.existsSync(filename)) {
          log.warning("Ignoring nonexistent filename: " + filename);
          continue;
        }
        stat = fs.statSync(filename);
        if (stat.isFile()) {
          if (filename.match(cbrRegex)) {
            archives.push(filename);
          }
        } else if (stat.isDirectory()) {
          list = cfs.listDir(filename);
          for (k = 0, len1 = list.length; k < len1; k++) {
            fn = list[k];
            fn = path.resolve(filename, fn);
            if (fn.match(cbrRegex)) {
              archives.push(fn);
            }
          }
        } else {
          log.warning("Ignoring unrecognized filename: " + filename);
        }
      }
      return archives;
    };

    Crackers.prototype.organize = function(args) {
      var archives, cmd, dst, dstDir, j, len, madeDir, match, num, parsed, src;
      archives = this.findArchives(args.filenames);
      if (archives.length === 0) {
        log.warning("organize: Nothing to do!");
        return;
      }
      madeDir = {};
      cmd = "mv";
      if (process.platform === 'win32') {
        cmd = "rename";
      }
      for (j = 0, len = archives.length; j < len; j++) {
        src = archives[j];
        parsed = path.parse(src);
        dst = src;
        match = parsed.base.match(/^(\D*)(\d+)/);
        if (match) {
          if (match[1].length > 0) {
            dstDir = path.join(parsed.dir, match[1]);
            dstDir = dstDir.replace(/[\. ]$/, '');
            if (!madeDir[dstDir] && !cfs.dirExists(dstDir)) {
              madeDir[dstDir] = true;
              if (args.execute) {
                console.log("Mkdir : \"" + dstDir + "\"");
                fs.mkdirSync(dstDir);
              } else {
                console.log("mkdir \"" + dstDir + "\"");
              }
            }
          } else {
            dstDir = parsed.dir;
          }
          num = "000" + match[2];
          num = num.substr(num.length - 3);
          dst = path.join(dstDir, num) + parsed.ext;
        }
        if (args.execute) {
          console.log("Rename: \"" + src + "\"");
          console.log("    to: \"" + dst + "\"");
          fs.renameSync(src, dst);
        } else {
          console.log(cmd + " \"" + src + "\" \"" + dst + "\"");
        }
      }
    };

    Crackers.prototype.cleanup = function(args) {
      var archives, cmd, filename, j, len;
      archives = this.findArchives(args.filenames);
      if (archives.length === 0) {
        log.warning("cleanup: Nothing to do!");
        return;
      }
      cmd = "rm";
      if (process.platform === 'win32') {
        cmd = "del";
      }
      for (j = 0, len = archives.length; j < len; j++) {
        filename = archives[j];
        if (args.execute) {
          console.log("Removing: " + filename);
          fs.unlinkSync(filename);
        } else {
          console.log(cmd + " \"" + filename + "\"");
        }
      }
    };

    return Crackers;

  })();

  module.exports = Crackers;

}).call(this);
