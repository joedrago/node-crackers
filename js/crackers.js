// Generated by CoffeeScript 1.9.3
(function() {
  var ComicGenerator, Crackers, IndexGenerator, Unpacker, cfs, constants, log, path, ref, touch;

  cfs = require('./cfs');

  constants = require('./constants');

  log = require('./log');

  path = require('path');

  touch = require('touch');

  ref = require('./generators'), ComicGenerator = ref.ComicGenerator, IndexGenerator = ref.IndexGenerator;

  Unpacker = require('./unpacker');

  Crackers = (function() {
    function Crackers() {}

    Crackers.prototype.error = function(text) {
      log.error(text);
      return false;
    };

    Crackers.prototype.update = function(args) {
      var comicDir, comicGenerator, file, filesToUnpack, i, imageDir, imageDirs, j, len, len1, parsed, unpackDir, unpackFile;
      this.updateDir = path.resolve('.', args.dir);
      if (!cfs.dirExists(this.updateDir)) {
        return this.error("'" + this.updateDir + "' is not an existing directory.");
      }
      log.verbose("updateDir: " + this.updateDir);
      this.rootDir = cfs.findParentContainingFilename(this.updateDir, constants.ROOT_FILENAME);
      if (!this.rootDir) {
        this.rootDir = this.updateDir;
        log.verbose("crackers root not found (" + constants.ROOT_FILENAME + " not detected in parents).");
      }
      log.verbose("rootDir  : " + this.rootDir);
      this.rootFilename = cfs.join(this.rootDir, constants.ROOT_FILENAME);
      touch.sync(this.rootFilename);
      filesToUnpack = (function() {
        var i, len, ref1, results;
        ref1 = cfs.listDir(this.updateDir);
        results = [];
        for (i = 0, len = ref1.length; i < len; i++) {
          file = ref1[i];
          if (file.match(/\.cb[rz]$/)) {
            results.push(path.resolve(this.updateDir, file));
          }
        }
        return results;
      }).call(this);
      for (i = 0, len = filesToUnpack.length; i < len; i++) {
        unpackFile = filesToUnpack[i];
        parsed = path.parse(unpackFile);
        unpackDir = cfs.join(parsed.dir, parsed.name);
        log.verbose("Processing " + unpackFile + " ...");
        this.unpack(unpackFile, unpackDir);
      }
      imageDirs = (function() {
        var j, len1, ref1, results;
        ref1 = cfs.listDir(this.updateDir);
        results = [];
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          file = ref1[j];
          if (file.match(/images$/)) {
            results.push(path.resolve(this.updateDir, file));
          }
        }
        return results;
      }).call(this);
      for (j = 0, len1 = imageDirs.length; j < len1; j++) {
        imageDir = imageDirs[j];
        parsed = path.parse(imageDir);
        if (parsed.dir) {
          comicDir = parsed.dir;
          parsed = path.parse(comicDir);
          comicGenerator = new ComicGenerator(this.rootDir, comicDir, parsed.name);
          comicGenerator.generate();
        }
      }
      return true;
    };

    Crackers.prototype.unpack = function(file, dir, force) {
      var indexFilename, unpackRequired, unpacker, valid;
      if (force == null) {
        force = false;
      }
      if (!cfs.prepareComicDir(dir)) {
        return false;
      }
      indexFilename = cfs.join(dir, constants.INDEX_FILENAME);
      unpackRequired = force;
      if (cfs.newer(file, indexFilename)) {
        unpackRequired = true;
      }
      if (unpackRequired) {
        log.progress("Unpacking " + file + " into " + dir);
        unpacker = new Unpacker(file, dir);
        valid = unpacker.unpack();
        unpacker.cleanup();
        if (!valid) {
          return false;
        }
      } else {
        log.verbose("Unpack not required: (" + file + " older than " + indexFilename + ")");
      }
      return true;
    };

    return Crackers;

  })();

  module.exports = Crackers;

}).call(this);
