// Generated by CoffeeScript 1.9.3
(function() {
  var ManifestGenerator, cfs, constants, fs, log, path;

  cfs = require('./cfs');

  constants = require('./constants');

  fs = require('fs');

  log = require('./log');

  path = require('path');

  ManifestGenerator = (function() {
    function ManifestGenerator(rootDir) {
      this.rootDir = rootDir;
      this.manifestFilename = cfs.join(this.rootDir, constants.MANIFEST_FILENAME);
    }

    ManifestGenerator.prototype.generate = function() {
      var atLeaf, children, comic, comics, dir, i, indexDir, indexlist, issues, j, k, keys, len, len1, list, manifest, metadata, newchildren, parsed, ref;
      comics = cfs.gatherComics(this.rootDir);
      children = {};
      issues = {};
      for (i = 0, len = comics.length; i < len; i++) {
        comic = comics[i];
        metadata = cfs.readMetadata(comic.dir);
        parsed = path.parse(comic.relativeDir);
        indexDir = parsed.dir;
        dir = comic.relativeDir;
        atLeaf = true;
        while (true) {
          parsed = path.parse(dir);
          indexDir = (ref = parsed.dir) != null ? ref : "";
          if (!children.hasOwnProperty(indexDir)) {
            children[indexDir] = {};
          }
          if (atLeaf) {
            children[indexDir][comic.relativeDir] = {
              type: 'issue',
              dir: comic.relativeDir,
              pages: metadata.pages
            };
          } else {
            children[indexDir][dir] = {
              type: 'index',
              dir: dir
            };
          }
          atLeaf = false;
          if (!issues.hasOwnProperty(indexDir)) {
            issues[indexDir] = [];
          }
          issues[indexDir].push({
            dir: comic.relativeDir,
            pages: metadata.pages
          });
          dir = indexDir;
          if (indexDir.length < 1) {
            break;
          }
        }
      }
      newchildren = {};
      for (indexDir in children) {
        indexlist = children[indexDir];
        list = [];
        keys = Object.keys(indexlist);
        for (j = 0, len1 = keys.length; j < len1; j++) {
          k = keys[j];
          list.push(indexlist[k]);
        }
        newchildren[indexDir] = list;
      }
      children = newchildren;
      manifest = {
        issues: issues,
        children: children
      };
      return fs.writeFileSync(this.manifestFilename, JSON.stringify(manifest, null, 2));
    };

    return ManifestGenerator;

  })();

  module.exports = ManifestGenerator;

}).call(this);
