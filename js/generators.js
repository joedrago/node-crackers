// Generated by CoffeeScript 1.9.3
(function() {
  var ComicGenerator, IndexGenerator, cfs, constants, fs, log, path;

  cfs = require('./cfs');

  constants = require('./constants');

  fs = require('fs');

  log = require('./log');

  path = require('path');

  ComicGenerator = (function() {
    function ComicGenerator(dir, title) {
      this.dir = dir;
      this.title = title;
      this.templateFilename = __dirname + "/../templates/comic.html";
      this.indexFilename = path.join(this.dir, constants.INDEX_FILENAME);
      this.images = cfs.listImages(path.join(this.dir, constants.IMAGES_DIR));
    }

    ComicGenerator.prototype.generate = function() {
      var i, image, inject, j, len, len1, line, matches, outputText, parsed, rawTemplate, ref, templateLines;
      if (this.images.length === 0) {
        log.error("No images in '" + this.dir + "', removing index");
        fs.unlinkSync(this.indexFilename);
        return false;
      }
      rawTemplate = fs.readFileSync(this.templateFilename);
      templateLines = String(rawTemplate).split(/(?:\n|\r\n|\r)/g);
      outputText = "";
      for (i = 0, len = templateLines.length; i < len; i++) {
        line = templateLines[i];
        matches = line.match(/^#inject (.+)/);
        if (matches) {
          inject = matches[1];
          switch (inject) {
            case 'title':
              outputText += this.title + "\n";
              break;
            case 'list':
              ref = this.images;
              for (j = 0, len1 = ref.length; j < len1; j++) {
                image = ref[j];
                parsed = path.parse(image);
                outputText += "    <a href=\"" + constants.IMAGES_DIR + "/" + parsed.base + "\"></a>\n";
              }
              break;
            default:
              outputText += "<!-- #inject skipped '" + inject + "' -->\n";
          }
        } else {
          outputText += line;
          outputText += "\n";
        }
      }
      fs.writeFileSync(this.indexFilename, outputText);
      log.verbose("Wrote " + this.indexFilename);
      return true;
    };

    return ComicGenerator;

  })();

  IndexGenerator = (function() {
    function IndexGenerator(dir) {
      this.dir = dir;
    }

    return IndexGenerator;

  })();

  module.exports = {
    IndexGenerator: IndexGenerator,
    ComicGenerator: ComicGenerator
  };

}).call(this);
