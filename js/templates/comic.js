// Generated by CoffeeScript 1.9.3
(function() {
  var Auto, Comic, altZoom, autoNext, autoPrev, autoState, autoStateOnShowEnd, endZoom, fadeIn, fadeOut, helpShowing, kickPreloader, loadedImages, nextUrl, preloadImageCount, preloadImageCountDefault, prevUrl, spaceHeld, spaceMovedZoom, touchTimestamp, updateZoom, updateZoomPos, zoomScale, zoomScaleIndex, zoomScales, zoomToCorner, zoomX, zoomY;

  touchTimestamp = null;

  zoomScales = [1.5, 2, 2.5, 3];

  zoomScaleIndex = 0;

  zoomScale = zoomScales[zoomScaleIndex];

  zoomX = 0;

  zoomY = 0;

  altZoom = getOptBool('altzoom');

  preloadImageCountDefault = 3;

  preloadImageCount = getOptInt('preload', preloadImageCountDefault);

  spaceHeld = false;

  spaceMovedZoom = false;

  helpShowing = false;

  prevUrl = "#inject{prev}";

  nextUrl = "#inject{next}";

  
var comicImages = [
#inject{jslist}
null];
comicImages.pop();
;

  Auto = {
    None: 0,
    TopLeft: 1,
    BottomRight: 2
  };

  autoState = Auto.None;

  autoStateOnShowEnd = Auto.None;

  Number.prototype.clamp = function(min, max) {
    return Math.min(Math.max(this, min), max);
  };

  updateZoomPos = function(t) {
    var zX, zY;
    zoomX = ((t.clientX - t.target.offsetLeft) / t.target.clientWidth).clamp(0, 1);
    zoomY = ((t.clientY - t.target.offsetTop) / t.target.clientHeight).clamp(0, 1);
    if (1) {
      zX = Math.min(1, Math.floor(zoomX * 3) / 2);
      zY = Math.min(1, Math.floor(zoomY * 3) / 2);
      if ((zX === 0.5) && (zY === 0.5)) {
        zoomX = Math.max(0, zoomX - (1 / 4)) * 2;
        return zoomY = Math.max(0, zoomY - (1 / 4)) * 2;
      } else {
        zoomX = zX;
        return zoomY = zY;
      }
    }
  };

  updateZoom = function() {
    var diffh, diffw, h, ih, iw, offX, offY, scaledH, scaledW, tf, transformOriginX, transformOriginY, w;
    w = 0;
    h = 0;
    $(".fotorama__stage__frame.fotorama__active").each(function() {
      w = this.clientWidth;
      return h = this.clientHeight;
    });
    iw = 0;
    ih = 0;
    $(".fotorama__stage__frame.fotorama__active img").each(function() {
      iw = this.width;
      return ih = this.height;
    });
    transformOriginX = "0px";
    transformOriginY = "0px";
    if ((w > 0) && (h > 0)) {
      offX = (zoomScale - 1) * -w * zoomX;
      offY = (zoomScale - 1) * -h * zoomY;
      if ((iw > 0) && (ih > 0)) {
        diffw = w - iw;
        diffh = h - ih;
        offX += (zoomX - 0.5) * (diffw * zoomScale);
        offY += (zoomY - 0.5) * (diffh * zoomScale);
      }
      scaledW = zoomScale * iw;
      scaledH = zoomScale * ih;
      if (scaledW < w) {
        transformOriginX = "50%";
        offX = 0;
      }
      if (scaledH < h) {
        transformOriginY = "50%";
        offY = 0;
      }
      tf = "translate(" + offX + "px, " + offY + "px) scale(" + zoomScale + ")";
      return $(".fotorama__stage__frame.fotorama__active").css({
        "transform-origin": transformOriginX + " " + transformOriginY,
        "transform": tf
      });
    }
  };

  endZoom = function() {
    $(".fotorama__stage__frame.fotorama__active").css({
      "transform-origin": "0px 0px",
      "transform": "translate(0px, 0px) scale(1)"
    });
    return autoState = Auto.None;
  };

  fadeIn = function() {
    if (1) {
      return $('#zoombox').finish().fadeTo(100, 0.5);
    }
  };

  fadeOut = function() {
    if (1) {
      return $('#zoombox').delay(250).fadeTo(250, 0);
    }
  };

  window.touchMove = function(event) {
    event.preventDefault();
    updateZoomPos(event.changedTouches[0]);
    return updateZoom();
  };

  window.touchStart = function(event) {
    event.preventDefault();
    touchTimestamp = new Date().getTime();
    updateZoomPos(event.changedTouches[0]);
    updateZoom();
    return fadeIn();
  };

  window.touchEnd = function(event) {
    var diff, endTouchTimestamp;
    event.preventDefault();
    endTouchTimestamp = new Date().getTime();
    diff = endTouchTimestamp - touchTimestamp;
    if (diff < 100) {
      endZoom();
    }
    return fadeOut();
  };

  window.nextScale = function(event) {
    event.preventDefault();
    zoomScaleIndex = (zoomScaleIndex + 1) % zoomScales.length;
    zoomScale = zoomScales[zoomScaleIndex];
    return updateZoom();
  };

  zoomToCorner = function(x, y) {
    if ((x === 0) && (x === 0)) {
      autoState = Auto.TopLeft;
    } else if ((x === 1) && (y === 1)) {
      autoState = Auto.BottomRight;
    } else {
      autoState = Auto.None;
    }
    zoomX = x;
    zoomY = y;
    return updateZoom();
  };

  autoPrev = function() {
    var fotorama;
    switch (autoState) {
      case Auto.None:
        autoStateOnShowEnd = Auto.BottomRight;
        fotorama = $('.fotorama').data('fotorama');
        return fotorama.show('<');
      case Auto.TopLeft:
        return endZoom();
      case Auto.BottomRight:
        return zoomToCorner(0, 0);
    }
  };

  autoNext = function() {
    var fotorama;
    switch (autoState) {
      case Auto.None:
        return zoomToCorner(0, 0);
      case Auto.TopLeft:
        return zoomToCorner(1, 1);
      case Auto.BottomRight:
        fotorama = $('.fotorama').data('fotorama');
        return fotorama.show('>');
    }
  };

  $(document).keydown(function(event) {
    var fotorama;
    console.log("keydown", event.keyCode);
    if (helpShowing) {
      helpShowing = false;
      $('#help').fadeOut();
    }
    switch (event.keyCode) {
      case 49:
      case 50:
      case 51:
      case 52:
        zoomScaleIndex = event.keyCode - 49;
        zoomScale = zoomScales[zoomScaleIndex];
        updateZoom();
        break;
      case 192:
        endZoom();
        break;
      case 32:
        spaceHeld = true;
        autoState = Auto.None;
        console.log("autoState: None (space)");
        break;
      case 90:
        autoState = Auto.None;
        fotorama = $('.fotorama').data('fotorama');
        fotorama.show('<');
        break;
      case 88:
        autoState = Auto.None;
        fotorama = $('.fotorama').data('fotorama');
        fotorama.show('>');
        break;
      case 81:
        zoomToCorner(0, 0);
        break;
      case 87:
        zoomToCorner(1, 0);
        break;
      case 65:
        zoomToCorner(0, 1);
        break;
      case 83:
        zoomToCorner(1, 1);
        break;
      case 68:
        autoPrev();
        break;
      case 70:
        autoNext();
        break;
      case 78:
        if (nextUrl) {
          window.location = nextUrl;
        }
        break;
      case 80:
        if (prevUrl) {
          window.location = prevUrl;
        }
        break;
      case 66:
      case 73:
        window.location = '../';
        break;
      case 72:
      case 191:
        if (!helpShowing) {
          helpShowing = true;
          $('#help').fadeIn();
        }
    }
  });

  $(document).keyup(function(event) {
    switch (event.keyCode) {
      case 32:
        spaceHeld = false;
        if (spaceMovedZoom) {
          spaceMovedZoom = false;
        } else {
          endZoom();
        }
    }
  });

  $(document).mousemove(function(event) {
    if (spaceHeld) {
      updateZoomPos(event);
      updateZoom();
      return spaceMovedZoom = true;
    }
  });

  $("body").append("<div style=\"display:none\" id=\"preloadbar\"><div id=\"preloadbarinner\"></div></div>");

  loadedImages = {};

  kickPreloader = function(pageIndex) {
    var imagesToPreload, loadNextImage, nextLoadIndex;
    console.log("kickPreloader " + pageIndex);
    if (preloadImageCount > 0) {
      imagesToPreload = comicImages.slice(pageIndex, pageIndex + preloadImageCount);
      if (imagesToPreload.length > 0) {
        console.log("preloading ", imagesToPreload);
        $('#preloadbarinner').width("0%");
        nextLoadIndex = 0;
        loadedImages = {};
        loadNextImage = function() {
          var imageUrl, img, imgUrl, percentage;
          while (true) {
            if (nextLoadIndex >= imagesToPreload.length) {
              console.log("Preload: complete.");
              $('#preloadbarinner').width("100%");
              $('#preloadbar').fadeOut(500);
              return;
            }
            percentage = Math.floor(100 * (nextLoadIndex + 1) / imagesToPreload.length);
            $('#preloadbarinner').width(percentage + "%");
            $('#preloadbar').show();
            imageUrl = imagesToPreload[nextLoadIndex];
            if (loadedImages[imageUrl]) {
              nextLoadIndex += 1;
              continue;
            }
            imgUrl = imagesToPreload[nextLoadIndex];
            console.log("Preload: loading " + imgUrl);
            img = new Image();
            img.onload = function() {
              return loadNextImage();
            };
            img.onerror = function() {
              nextLoadIndex = 0;
              if (loadedImages.hasOwnProperty(imgUrl)) {
                delete loadedImages[imgUrl];
              }
              console.log("Preload: retrying " + imgUrl);
              return loadNextImage();
            };
            loadedImages[imgUrl] = img;
            img.src = imgUrl;
            nextLoadIndex += 1;
            return;
          }
        };
        return loadNextImage();
      }
    }
  };

  Comic = (function() {
    function Comic(startIndex) {
      this.startIndex = startIndex != null ? startIndex : 0;
      this.currentIndex = this.startIndex;
      this.zoomed = false;
      this.view = {
        w: 0,
        h: 0
      };
      this.updateView();
      this.currentImage = new Image;
      $(this.currentImage).css({
        'pointer-events': 'none'
      });
      $('#view').append(this.currentImage);
      this.hammer = new Hammer(document.getElementById('view'), {});
      this.hammer.on('doubletap', (function(_this) {
        return function(ev) {
          console.log('doubletap');
          _this.zoomed = !_this.zoomed;
          return _this.update(true);
        };
      })(this));
      this.goto(this.startIndex);
    }

    Comic.prototype.goto = function(index) {
      this.currentIndex = index;
      if (this.currentIndex >= comicImages.length) {
        this.currentIndex = comicImages.length - 1;
      }
      if (this.currentIndex < 0) {
        this.currentIndex = 0;
      }
      this.currentImage.onload = (function(_this) {
        return function() {
          _this.imageWidth = _this.currentImage.width;
          _this.imageHeight = _this.currentImage.height;
          return _this.update();
        };
      })(this);
      this.currentImage.onerror = (function(_this) {
        return function() {
          return _this.goto(index);
        };
      })(this);
      this.currentImage.src = '';
      return this.currentImage.src = comicImages[this.currentIndex];
    };

    Comic.prototype.updateView = function() {
      var comic;
      comic = this;
      return $("#view").each(function() {
        comic.view.w = this.clientWidth;
        return comic.view.h = this.clientHeight;
      });
    };

    Comic.prototype.calcUnzoomedPos = function() {
      var ih, imageAspectRatio, iw, pos, viewAspectRatio;
      if ((this.view.w === 0) || (this.view.h === 0)) {
        return null;
      }
      iw = this.imageWidth;
      ih = this.imageHeight;
      if ((iw === 0) || (ih === 0)) {
        return null;
      }
      imageAspectRatio = iw / ih;
      viewAspectRatio = this.view.w / this.view.h;
      pos = {
        x: 0,
        y: 0,
        w: 0,
        h: 0
      };
      if (imageAspectRatio < viewAspectRatio) {
        pos.w = Math.floor(this.view.h * imageAspectRatio);
        pos.h = this.view.h;
        pos.x = (this.view.w - pos.w) >> 1;
      } else {
        pos.w = this.view.w;
        pos.h = Math.floor(this.view.w / imageAspectRatio);
      }
      return pos;
    };

    Comic.prototype.calcImagePos = function() {
      var pos;
      pos = this.calcUnzoomedPos();
      return pos;
    };

    Comic.prototype.updateImage = function(animate) {
      var pos, scale;
      if (animate == null) {
        animate = false;
      }
      pos = this.calcImagePos();
      if (pos === null) {
        console.log("no image data yet");
        return;
      }
      console.log("setting pos to ", pos);
      $(this.currentImage).css({
        position: 'absolute',
        left: pos.x,
        top: pos.y,
        width: pos.w,
        height: pos.h
      });
      scale = 1;
      if (this.zoomed) {
        scale *= 2;
      }
      console.log("scale " + scale);
      return $(this.currentImage).css({
        "transform-origin": "50% 50%",
        "transform": "scale(" + scale + ")"
      });
    };

    Comic.prototype.update = function(animate) {
      if (animate == null) {
        animate = false;
      }
      this.updateView();
      return this.updateImage(animate);
    };

    return Comic;

  })();

  window.comic = new Comic();

}).call(this);
